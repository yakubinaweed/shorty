if (is.null(gmm_model) || is.null(gmm_model$classification)) {
warning("GMM model or classification is NULL. Cannot assign clusters.")
return(df)
}
df$cluster <- gmm_model$classification
return(df)
}
# Function to plot age vs HGB colored by cluster
plot_age_hgb <- function(df, male_hgb_transformed, female_hgb_transformed) {
if (is.null(df) || nrow(df) == 0) {
return(ggplot() + annotate("text", x = 0.5, y = 0.5, label = "No GMM data available for plotting.", size = 6, color = "grey50"))
}
plot_title <- "HGB vs Age by Subpopulation Cluster"
plot_subtitle <- ""
if (male_hgb_transformed) {
plot_subtitle <- paste(plot_subtitle, "Male HGB transformed for GMM.", sep="\n")
}
if (female_hgb_transformed) {
plot_subtitle <- paste(plot_subtitle, "Female HGB transformed for GMM.", sep="\n")
}
ggplot(df, aes(x = Age, y = HGB, color = factor(cluster))) +
geom_point(alpha = 0.7) +
facet_wrap(~Gender) +
theme_minimal() +
labs(title = plot_title,
subtitle = plot_subtitle,
x = "Age", y = "HGB", color = "Cluster") +
theme(legend.position = "bottom")
}
# =========================================================================
# SHINY UI
# =========================================================================
ui <- navbarPage(
title = "RefineR Reference Interval Estimation",
id = "tabs",
theme = bs_theme(version = 4, base_font = font_google("Inter"), heading_font = font_google("Rethink Sans"), font_scale = 1.1, bootswatch = "default"),
tabPanel(
title = "Main Analysis",
tags$head(
tags$style(HTML("
/* Custom CSS for a better look */
.output-box {
border: 1px solid #ddd;
border-radius: 8px;
padding: 15px;
margin-top: 20px;
background-color: #f9fbff;
box-shadow: 0 4px 8px rgba(0,0,0,0.05);
}
.sidebar-title {
font-weight: bold;
font-size: 1.2em;
margin-bottom: 15px;
}
.shiny-input-container {
margin-bottom: 15px;
}
.btn-primary, .btn-secondary {
margin-top: 5px;
width: 100%;
}
.disabled-tab-link {
pointer-events: none;
color: #ccc !important;
cursor: not-allowed;
background-color: transparent !important;
border-bottom-color: transparent !important;
}
"))
),
useShinyjs(),
tags$script(HTML("
var analysisRunning = false;
Shiny.addCustomMessageHandler('analysisStatus', function(status) {
analysisRunning = status;
var tabLink = $('a[data-value=\"Subpopulation Detection (GMM)\"]');
if (status) {
tabLink.addClass('disabled-tab-link');
tabLink.attr('data-toggle', 'disabled');
} else {
tabLink.removeClass('disabled-tab-link');
tabLink.attr('data-toggle', 'tab');
}
});
$(document).on('click', 'a[data-value=\"Subpopulation Detection (GMM)\"]', function(event) {
if (analysisRunning) {
event.preventDefault();
Shiny.setInputValue('tab_switch_blocked', new Date().getTime());
// Optional: Add a visual cue to the user that the tab is disabled
// e.g., show a temporary message or modal
return false;
}
});
")),
sidebarLayout(
sidebarPanel(
style = "padding-right: 15px;",
div(class = "sidebar-title", "Data and Analysis Parameters"),
fileInput(inputId = "data_file", label = "Upload Data (Excel File)", accept = c(".xlsx")),
hr(),
selectInput(inputId = "col_value", label = "Select Column for Values:", choices = c("None" = ""), selected = ""),
selectInput(inputId = "col_age", label = "Select Column for Age:", choices = c("None" = ""), selected = ""),
selectInput(inputId = "col_gender", label = "Select Column for Gender:", choices = c("None" = ""), selected = ""),
hr(),
selectInput(inputId = "gender_choice", label = "Select Gender:", choices = c("Male" = "M", "Female" = "F", "Both" = "Both"), selected = "Both"),
sliderInput(inputId = "age_range", label = "Age Range:", min = 0, max = 100, value = c(0, 100), step = 1),
radioButtons(inputId = "nbootstrap_speed", label = "Select Computation Speed:", choices = c("Fast" = "Fast", "Medium" = "Medium", "Slow" = "Slow"), selected = "Fast", inline = TRUE),
hr(),
actionButton("analyze_btn", "Analyze", class = "btn-primary"),
actionButton("reset_btn", "Reset File", class = "btn-secondary")
),
mainPanel(
style = "padding-left: 15px;",
uiOutput("app_message"),
div(class = "output-box",
h3("Analysis Results"),
plotOutput("result_plot", height = "400px"),
verbatimTextOutput("result_text")
)
)
)
),
tabPanel(
title = "Subpopulation Detection (GMM)",
h4("Detect Subpopulations using HGB and Age"),
p("Gaussian Mixture Models aim to detect hidden subpopulations within your data based on HGB and Age. The system will automatically select the best number of components (between 2 and 5) using the Bayesian Information Criterion (BIC), where the lowest BIC value indicates the optimal fit. While increasing the number of components can improve model fit, it also increases the risk of overfitting, where the model learns noise rather than true underlying patterns."),
fluidRow(
column(4,
fileInput(inputId = "gmm_file_upload", label = "Upload Data (Excel File)", accept = c(".xlsx")),
hr(),
uiOutput("gmm_hgb_col_selector"),
uiOutput("gmm_age_col_selector"),
uiOutput("gmm_gender_col_selector"),
hr(),
actionButton("run_gmm_analysis_btn", "Run Subpopulation Detection", class = "btn-primary"),
actionButton("reset_gmm_analysis_btn", "Reset GMM Data", class = "btn-secondary")
),
column(8,
uiOutput("gmm_results_ui")
)
)
),
footer = tags$footer(
HTML('© 2025 <a href="https://github.com/yakubinaweed/refineR-reference-interval" target="_blank">Naweed Yakubi</a> • All rights reserved.'),
style = "
position: relative;
bottom: 0;
width: 100%;
text-align: center;
padding: 10px 0;
color: #777;
font-size: 0.8em;"
)
)
# =========================================================================
# SHINY SERVER LOGIC
# =========================================================================
server <- function(input, output, session) {
# --- Reactive Values for State Management ---
data_reactive <- reactiveVal(NULL)
gmm_uploaded_data_rv <- reactiveVal(NULL)
gmm_processed_data_rv <- reactiveVal(NULL)
gmm_transformation_details_rv <- reactiveVal(list(male_hgb_transformed = FALSE, female_hgb_transformed = FALSE))
message_rv <- reactiveVal(list(type = "", text = ""))
analysis_running_rv <- reactiveVal(FALSE)
# --- Centralized Message Display ---
output$app_message <- renderUI({
msg <- message_rv()
if (is.null(msg) || msg$text == "") {
return(NULL)
}
class_name <- switch(msg$type,
"error" = "alert alert-danger",
"success" = "alert alert-success",
"warning" = "alert alert-warning",
"info" = "alert alert-info",
"alert alert-secondary")
div(class = class_name, msg$text)
})
# =========================================================================
# Main Analysis Tab Logic
# =========================================================================
observeEvent(input$data_file, {
req(input$data_file)
tryCatch({
data <- readxl::read_excel(input$data_file$datapath)
data_reactive(data)
message_rv(list(type = "success", text = "Data file uploaded and loaded successfully."))
col_names <- colnames(data)
all_col_choices_with_none <- c("None" = "", col_names)
guess_column <- function(cols_available, common_names) {
for (name in common_names) {
match_idx <- grep(paste0("^", name, "$"), cols_available, ignore.case = TRUE)
if (length(match_idx) > 0) {
return(cols_available[match_idx[1]])
}
}
return("")
}
updateSelectInput(session, "col_value", choices = all_col_choices_with_none, selected = guess_column(col_names, c("HB_value", "Value", "Result", "Measurement", "Waarde")))
updateSelectInput(session, "col_age", choices = all_col_choices_with_none, selected = guess_column(col_names, c("leeftijd", "age", "AgeInYears", "Years")))
updateSelectInput(session, "col_gender", choices = all_col_choices_with_none, selected = guess_column(col_names, c("geslacht", "gender", "sex", "Gender", "Sex")))
}, error = function(e) {
message_rv(list(type = "error", text = paste("Error loading file:", e$message)))
data_reactive(NULL)
})
})
observeEvent(input$reset_btn, {
shinyjs::reset("data_file")
data_reactive(NULL)
message_rv(list(type = "", text = ""))
output$result_text <- renderPrint({ cat("") })
output$result_plot <- renderPlot(plot.new())
updateSelectInput(session, "col_value", choices = c("None" = ""), selected = "")
updateSelectInput(session, "col_age", choices = c("None" = ""), selected = "")
updateSelectInput(session, "col_gender", choices = c("None" = ""), selected = "")
})
observeEvent(input$analyze_btn, {
if (analysis_running_rv()) {
message_rv(list(text = "Analysis is already running. Please wait or reset.", type = "warning"))
return()
}
req(data_reactive(), input$col_value, input$col_age, input$col_gender)
if (input$col_value == "" || input$col_age == "" || input$col_gender == "") {
message_rv(list(text = "Please select all required columns (Value, Age, Gender).", type = "warning"))
return()
}
analysis_running_rv(TRUE)
message_rv(list(text = "Analysis started...", type = "info"))
session$sendCustomMessage('analysisStatus', TRUE)
isolated_inputs <- isolate({
list(
gender_choice = input$gender_choice,
age_range = input$age_range,
col_value = input$col_value,
col_age = input$col_age,
col_gender = input$col_gender,
nbootstrap_speed = input$nbootstrap_speed
)
})
refiner_model <- NULL
tryCatch({
filtered_data <- filter_data(data_reactive(), isolated_inputs$gender_choice, isolated_inputs$age_range[1], isolated_inputs$age_range[2], isolated_inputs$col_gender, isolated_inputs$col_age)
if (nrow(filtered_data) == 0) {
stop("Filtered dataset is empty. Please adjust your filtering criteria.")
}
nbootstrap_value <- switch(isolated_inputs$nbootstrap_speed, "Fast" = 1, "Medium" = 50, "Slow" = 200, 1)
refiner_model <- refineR::findRI(Data = filtered_data[[isolated_inputs$col_value]], NBootstrap = nbootstrap_value)
if (is.null(refiner_model) || inherits(refiner_model, "try-error")) {
stop("RefineR model could not be generated. Check your input data and parameters.")
}
output$result_text <- renderPrint({
print(refiner_model)
})
output$result_plot <- renderPlot({
if (!is.null(filtered_data) && nrow(filtered_data) > 0) {
plot(refiner_model, showCI = TRUE, RIperc = c(0.025, 0.975), showPathol = FALSE,
title = paste("Estimated Reference Intervals"),
xlab = sprintf("%s", isolated_inputs$col_value))
} else {
plot.new()
text(0.5, 0.5, "No data to plot after filtering.", cex = 1.5)
}
})
message_rv(list(text = "Analysis complete!", type = "success"))
}, error = function(e) {
error_message <- paste("Analysis Error:", e$message)
message_rv(list(text = error_message, type = "danger"))
output$result_text <- renderPrint({ cat(error_message) })
output$result_plot <- renderPlot(plot.new())
}, finally = {
analysis_running_rv(FALSE)
session$sendCustomMessage('analysisStatus', FALSE)
})
})
# =========================================================================
# Subpopulation Detection (GMM) Tab Logic
# =========================================================================
output$gmm_hgb_col_selector <- renderUI({
data <- gmm_uploaded_data_rv()
if (is.null(data)) return(NULL)
selectInput("gmm_hgb_col", "Select HGB Column:", choices = names(data),
selected = c("HGB", "hgb", "HB", "hb")[c("HGB", "hgb", "HB", "hb") %in% names(data)][1])
})
output$gmm_age_col_selector <- renderUI({
data <- gmm_uploaded_data_rv()
if (is.null(data)) return(NULL)
selectInput("gmm_age_col", "Select Age Column:", choices = names(data),
selected = c("Age", "age")[c("Age", "age") %in% names(data)][1])
})
output$gmm_gender_col_selector <- renderUI({
data <- gmm_uploaded_data_rv()
if (is.null(data)) return(NULL)
selectInput("gmm_gender_col", "Select Gender Column:", choices = names(data),
selected = c("Gender", "gender", "Sex", "sex")[c("Gender", "gender", "Sex", "sex") %in% names(data)][1])
})
observeEvent(input$gmm_file_upload, {
req(input$gmm_file_upload)
tryCatch({
data <- readxl::read_excel(input$gmm_file_upload$datapath)
gmm_uploaded_data_rv(data)
message_rv(list(text = "GMM data uploaded successfully.", type = "success"))
}, error = function(e) {
message_rv(list(text = paste("Error reading GMM file:", e$message), type = "error"))
gmm_uploaded_data_rv(NULL)
})
})
observeEvent(input$run_gmm_analysis_btn, {
req(gmm_uploaded_data_rv(), input$gmm_hgb_col, input$gmm_age_col, input$gmm_gender_col)
if (analysis_running_rv()) {
message_rv(list(text = "An analysis is already running. Please wait.", type = "warning"))
return(NULL)
}
analysis_running_rv(TRUE)
shinyjs::disable("tabs")
withProgress(message = 'Running GMM Analysis', value = 0, {
incProgress(0.1, detail = "Loading data...")
data <- gmm_uploaded_data_rv()
hgb_col <- input$gmm_hgb_col
age_col <- input$gmm_age_col
gender_col <- input$gmm_gender_col
if (!all(c(hgb_col, age_col, gender_col) %in% names(data))) {
message_rv(list(text = "Selected columns not found in data. Please check selections.", type = "error"))
analysis_running_rv(FALSE)
shinyjs::enable("tabs")
return(NULL)
}
gmm_data <- data %>%
dplyr::select(HGB = !!sym(hgb_col), Age = !!sym(age_col), Gender_orig = !!sym(gender_col)) %>%
na.omit()
if (nrow(gmm_data) == 0) {
message_rv(list(text = "No complete rows for GMM after NA removal. Check data or selections.", type = "error"))
analysis_running_rv(FALSE)
shinyjs::enable("tabs")
return(NULL)
}
incProgress(0.2, detail = "Splitting data by gender and transforming...")
gmm_data <- gmm_data %>%
mutate(Gender = case_when(
grepl("male|m", Gender_orig, ignore.case = TRUE) ~ "Male",
grepl("female|f", Gender_orig, ignore.case = TRUE) ~ "Female",
TRUE ~ "Other"
)) %>%
filter(Gender %in% c("Male", "Female"))
male_data <- gmm_data %>% filter(Gender == "Male")
female_data <- gmm_data %>% filter(Gender == "Female")
combined_clustered_data <- tibble()
male_hgb_transformed_flag <- FALSE
female_hgb_transformed_flag <- FALSE
if (nrow(male_data) > 0) {
yj_result_male <- apply_conditional_yeo_johnson(male_data$HGB)
male_data$HGB_transformed <- yj_result_male$transformed_data
male_hgb_transformed_flag <- yj_result_male$transformation_applied
male_data$HGB_z <- z_transform(male_data$HGB_transformed)
male_data$Age_z <- z_transform(male_data$Age)
incProgress(0.2, detail = "Running GMM for Male data...")
tryCatch({
male_gmm_model <- run_gmm(male_data %>% dplyr::select(HGB = HGB_z, Age = Age_z))
male_data <- assign_clusters(male_data, male_gmm_model)
male_data$cluster <- as.factor(male_data$cluster)
male_data$gmm_model <- list(male_gmm_model) # Store the model
}, error = function(e) {
message_rv(list(text = paste("Error running GMM for male data:", e$message), type = "error"))
})
combined_clustered_data <- bind_rows(combined_clustered_data, male_data %>% dplyr::select(HGB, Age, Gender, cluster, gmm_model))
}
if (nrow(female_data) > 0) {
yj_result_female <- apply_conditional_yeo_johnson(female_data$HGB)
female_data$HGB_transformed <- yj_result_female$transformed_data
female_hgb_transformed_flag <- yj_result_female$transformation_applied
female_data$HGB_z <- z_transform(female_data$HGB_transformed)
female_data$Age_z <- z_transform(female_data$Age)
incProgress(0.2, detail = "Running GMM for Female data...")
tryCatch({
female_gmm_model <- run_gmm(female_data %>% dplyr::select(HGB = HGB_z, Age = Age_z))
female_data <- assign_clusters(female_data, female_gmm_model)
female_data$cluster <- as.factor(female_data$cluster)
female_data$gmm_model <- list(female_gmm_model) # Store the model
}, error = function(e) {
message_rv(list(text = paste("Error running GMM for female data:", e$message), type = "error"))
})
combined_clustered_data <- bind_rows(combined_clustered_data, female_data %>% dplyr::select(HGB, Age, Gender, cluster, gmm_model))
}
gmm_transformation_details_rv(list(male_hgb_transformed = male_hgb_transformed_flag, female_hgb_transformed = female_hgb_transformed_flag))
if (nrow(combined_clustered_data) > 0) {
gmm_processed_data_rv(combined_clustered_data)
message_rv(list(text = "GMM analysis complete!", type = "success"))
} else {
message_rv(list(text = "No data available after GMM processing for plotting/summary.", type = "error"))
gmm_processed_data_rv(NULL)
}
incProgress(0.1, detail = "Generating plots and summaries...")
})
analysis_running_rv(FALSE)
shinyjs::enable("tabs")
})
observeEvent(input$reset_gmm_analysis_btn, {
gmm_uploaded_data_rv(NULL)
gmm_processed_data_rv(NULL)
gmm_transformation_details_rv(list(male_hgb_transformed = FALSE, female_hgb_transformed = FALSE))
shinyjs::reset("gmm_file_upload")
output$gmm_results_ui <- renderUI(NULL) # Clear the results UI
message_rv(list(text = "GMM data and results reset.", type = "info"))
})
output$gmm_results_ui <- renderUI({
plot_data <- gmm_processed_data_rv()
if (is.null(plot_data) || nrow(plot_data) == 0) {
return(NULL)
}
tagList(
div(class = "output-box",
h4("Subpopulation Plot"),
plotOutput("plot_output_gmm", height = "600px")),
div(class = "output-box",
h4("GMM Summary"),
verbatimTextOutput("gmm_summary_output")),
div(class = "output-box",
h4("Cluster Age Group Summary"),
tableOutput("gmm_age_group_summary_output"))
)
})
output$plot_output_gmm <- renderPlot({
plot_data <- gmm_processed_data_rv()
if (is.null(plot_data) || nrow(plot_data) == 0) {
return(ggplot() + annotate("text", x = 0.5, y = 0.5, label = "No GMM data available for plotting.", size = 6, color = "grey50"))
}
plot_age_hgb(plot_data,
male_hgb_transformed = gmm_transformation_details_rv()$male_hgb_transformed,
female_hgb_transformed = gmm_transformation_details_rv()$female_hgb_transformed)
})
output$gmm_summary_output <- renderPrint({
plot_data <- gmm_processed_data_rv()
if (is.null(plot_data) || nrow(plot_data) == 0) {
return("No GMM analysis results to display.")
}
cat("--- GMM Analysis Summary ---\n")
# Get the models from the processed data
male_gmm_model <- plot_data %>% filter(Gender == "Male") %>% pull(gmm_model) %>% .[[1]]
female_gmm_model <- plot_data %>% filter(Gender == "Female") %>% pull(gmm_model) %>% .[[1]]
# Process Male data
if (!is.null(male_gmm_model)) {
cat("\n--- Male Subpopulations ---\n")
print(summary(male_gmm_model))
for (i in 1:male_gmm_model$G) {
cat(paste0("Cluster ", i, ":\n"))
cat(paste0("  Proportion: ", round(male_gmm_model$parameters$pro[i], 3), "\n"))
cat(paste0("  Mean HGB: ", round(male_gmm_model$parameters$mean["HGB", i], 3), "\n"))
cat(paste0("  Mean Age: ", round(male_gmm_model$parameters$mean["Age", i], 3), "\n"))
cluster_covariance_matrix <- male_gmm_model$parameters$variance$sigma[,,i]
sd_hgb <- tryCatch(sqrt(cluster_covariance_matrix["HGB", "HGB"]), error = function(e) NA)
sd_age <- tryCatch(sqrt(cluster_covariance_matrix["Age", "Age"]), error = function(e) NA)
cat(paste0("  Std Dev HGB: ", ifelse(is.na(sd_hgb), "N/A", round(sd_hgb, 3)), "\n"))
cat(paste0("  Std Dev Age: ", ifelse(is.na(sd_age), "N/A", round(sd_age, 3)), "\n"))
if (!is.na(sd_age)) {
lower_age <- round(male_gmm_model$parameters$mean["Age", i] - 2 * sd_age, 1)
upper_age <- round(male_gmm_model$parameters$mean["Age", i] + 2 * sd_age, 1)
cat(paste0("  Estimated Age Range (Mean +/- 2SD): [", max(0, lower_age), " to ", upper_age, "] years\n"))
} else {
cat("  Estimated Age Range: N/A (Std Dev Age problematic)\n")
}
cat("\n")
}
} else {
cat("No male subpopulations detected.\n")
}
# Process Female data
if (!is.null(female_gmm_model)) {
cat("\n--- Female Subpopulations ---\n")
print(summary(female_gmm_model))
for (i in 1:female_gmm_model$G) {
cat(paste0("Cluster ", i, ":\n"))
cat(paste0("  Proportion: ", round(female_gmm_model$parameters$pro[i], 3), "\n"))
cat(paste0("  Mean HGB: ", round(female_gmm_model$parameters$mean["HGB", i], 3), "\n"))
cat(paste0("  Mean Age: ", round(female_gmm_model$parameters$mean["Age", i], 3), "\n"))
cluster_covariance_matrix <- female_gmm_model$parameters$variance$sigma[,,i]
sd_hgb <- tryCatch(sqrt(cluster_covariance_matrix["HGB", "HGB"]), error = function(e) NA)
sd_age <- tryCatch(sqrt(cluster_covariance_matrix["Age", "Age"]), error = function(e) NA)
cat(paste0("  Std Dev HGB: ", ifelse(is.na(sd_hgb), "N/A", round(sd_hgb, 3)), "\n"))
cat(paste0("  Std Dev Age: ", ifelse(is.na(sd_age), "N/A", round(sd_age, 3)), "\n"))
if (!is.na(sd_age)) {
lower_age <- round(female_gmm_model$parameters$mean["Age", i] - 2 * sd_age, 1)
upper_age <- round(female_gmm_model$parameters$mean["Age", i] + 2 * sd_age, 1)
cat(paste0("  Estimated Age Range (Mean +/- 2SD): [", max(0, lower_age), " to ", upper_age, "] years\n"))
} else {
cat("  Estimated Age Range: N/A (Std Dev Age problematic)\n")
}
cat("\n")
}
} else {
cat("No female subpopulations detected.\n")
}
if (gmm_transformation_details_rv()$male_hgb_transformed || gmm_transformation_details_rv()$female_hgb_transformed) {
cat("\nNote: HGB values were transformed (Yeo-Johnson) for GMM input due to skewness. Reported HGB values are original.\n")
}
})
output$gmm_age_group_summary_output <- renderTable({
plot_data <- gmm_processed_data_rv()
if (is.null(plot_data) || nrow(plot_data) == 0) {
return(NULL)
}
age_bins <- c(0, 10, 20, 30, 40, 50, 60, 70, 80, Inf)
age_labels <- c("<10", "10-19", "20-29", "30-39", "40-49", "50-59", "60-69", "70-79", "80+")
plot_data %>%
mutate(age_group_label = cut(Age, breaks = age_bins, labels = age_labels, right = FALSE)) %>%
group_by(Gender, age_group_label, cluster) %>%
summarise(Count = n(), .groups = 'drop') %>%
pivot_wider(names_from = cluster, values_from = Count, values_fill = 0)
}, rownames = FALSE)
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
